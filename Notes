class 1 -
Cucumber -

Java - programming language
Selenium - automate web based application

no reports in selenium
no common ground for all the team members

no main method for execution - no control of execution

smoke
regression

framework - this is the final outcome of the complete concepts

cucumber as a tool
cucumber/BDD/gherkin as a framework

Create a new project
File -> new -> Project -> Maven -> groupId -> artifactId -> click create

group id - it means the name of the organisation
artifact id - it means the name of the project


we created maven project -
pom.xml file is the configuration file where we will add all the dependencies
pom.xml is the file we will use to execute our code in the end of the framework
pom.xml is the file we will use to generate the report

in our project we get src folder in which we get main and test

main - the code we write to develop the application, we write it in main
test - the code we write to test the application, we write it in test

we delete main folder because we will work with test

in test folder -
we get java - to keep all the java stuff
we get resources - to keep all the non java stuff

java
selenium
cucumber
apache poi
commons

Class 2 -
Recap -
in selenium, we dont have reporting option, no execution control, no standard format
of writing the code. To achieve all these, we need to integrate our scripts with
additional tools and structure (framework)

cucumber is a tool which allows us to write scenarios in plain english text called
gherkin which follows behavioral driven development.

we created maven project
we have java, selenium, cucumber, apache poi

User story - 12345 - Valid admin login

Scenario -

Given - pre condition
when - actions
Then - expected result
And - supporting tag

Given user is navigated to HRMS application
When user enters admin username and password
And user clicks on login button
Then admin user is successfully logged in

in cucumber, every single test case will be considered as a scenario

we write scenario in cucumber in a special file called feature file having the
extension .feature

rules for writing the scenario -
once step def is created, don't add any space or . or any other character into it
don't create duplicate step, you will get an exception (duplicate step exception)

cucumber highly encourages code reusability

User story - Employee search

Scenario - search employee by id

    Given user is navigated to HRMS application
    When user enters admin username and password
    And user clicks on login button
    Then user is successfully logged in
    When user clicks on PIM option
    And user clicks on Employee List Option
    When user enters employee id
    And user clicks on search button
    Then user should be able to see employee details

class 3 -

for feature file, we need step definitions to execute the code.

we need one point of execution.

as per the standards, for employeesearch feature, we need employeesearch steps class
to write all the steps definition

we cannot write duplicate steps in step definitions classes

runner class - we execute all the scenarios, some of the scenarios or one of the scenarios
based on the requirement

in runners package, we will create all the test runner classes
features
glue
dry run
tags

there is a need through which I can execute one scenario among multiple
same tag name must be provided in scenario as it is in runner class
sprint 5
sprint 1,2,3,4 - 8, 5, 7, 9
we use 'or' keyword to execute scenarios from either conditions
if one condition is true, it will execute the scenario

we use 'and' keyword to execute the scenarios when both conditions must be true

utils folder - to create common methods class so that we can use all the commmon
functions from this class

Class 4 -

recap -
test runner is a class through which we can execute all the test cases and can also control
the flow of execution.

options we add in runner class
features - path to the feature directory
glue - it provides the path of step definitions classes
dry run - to generate the missing step def, we set dry run to true.
tags - in order to execute scenarios in a group, we execute them with tags.
we use 'and' and 'or' keyword to execute based on the conditions.
we must put , in between 2 cucumber options in runner class.

as per the standards/characteristics of framework
code reusability must be there
it should be easily expandable
it should be easily understandable
new person should be able to work with it with minimal guidance
things which are used multiple places cannot be hard coded

click -
send keys -

cross browser testing - when your scripts execute against multiple browser, it is cross browser testing

we need constants class to pass the path of all the constant files such as config, testdata etc.

background - for all the common steps of the scenarios, we can write them here.
till the time flow is same, we can take the steps. Once the flow changed, we can't take steps

it is limited to one feature file. It means, for different feature files, background will be
different.

class 5 -
recap -

how to pass the data from config file -
we wrote some of the common methods in common methods class

background - common steps from all the scenarios we can take and put it under background
**only till the flow is same**

background is applicable for one feature file.

order of execution - background execute -> scenario execute

Hooks - hooks are used to write the pre condition and post condition of the project
we need to create hooks class under steps package
when we execute the code, hooks class will execute pre condition first and then all the
test cases will be executed and then post condition will execute at last

DONT FORGET TO COMMENT STEPS FROM ALL FEATURE FILES FOR PRE AND POST CONdITION

in the framework, we cannot pass any hard coded data. cucumber allows us to perform
data driven testing

data driven testing - when one scenario executed against multiple set of data, we call it
data driven testing approach

scenario vs scenario outline -
scenario execute against one set of data from the feature file
scenario outline has examples table where we keep multiple sets of data and it will
execute based on the number of data sets

order of execution -  hooks -> background -> scenario

Page object model - it is a design pattern which says that we create separate
individual class as per the screens of the application. such as for login screen
we will create loginpage class, for dashboard screen we will create dashboardpage class

we keep all the locators of the login screen in loginpage class and same we will
do for all the classes

constructor we use to initialize the object and the elements of the class
we will call selenium page factory to initialize all the elements of the class
and we call it in constructor

class 6 -

recap -
data driven testing - when scripts execute against multiple sets of data we call it
ddt.

scenario outline we have to use to achieve ddt in cucumber with examples table

hooks - background - scenario -

hooks - in steps package, we write hooks class.
@before - pre condition
@after - post condition

POM - page object model design pattern
we create separate classes for separate screens of the application

with the help of constructor, we initialize all the web elements

class 7 -

recap -
data driven testing
we can achieve ddt using excel file when the volume of data is big
we can achieve ddt using data table
we can achieve ddt using examples table

data table vs examples table
data table is specific for just one step. However, examples table is for complete
scenario

page initializer class - to create objects of the classes we need centralized class
that's why we use page initializer which we call in common methods.

reporting in framework -
it gives us the complete information of the execution.

for opening the html report in
right click on the report -> open in -> browser -> chrome



maven surefire plugin we use to create a single project entity
from here we can execute all of our test cases

we should focus on build success message for executing pom.xml file
the way we added plugin in runnner class, we have to add plugin in pom.xml for reports

class 8 -

recap -

reports - we get html reports, json report and maven cucumber report from our
framework - All these type of reports is generated under target folder

take screenshot method - cucumber accept array of byte for the screenshot
Scenario class holds the complete status of the execution such as test case name,
status etc.

maven cucumber report plugin we used from pom.xml file to execute the test cases and
generate the report from the pom.xml file

assertion - whenever we write test cases, we need to validate the functionality of it
in cucumber framework we use junit assertions to do the same.



----------------------------------------------
API
----------------------------------------------

Class 1 - API -

Restaurant -

table -
customer/client - raihana - request

waiter  - rakhima - taking the request - taking the response
 -
chef -  ismael - responding to request


chase bank
wells fargo
bank of america
citi
capital

chase bank - chase atm - no extra money
chase bank - citi atm - extra money

				Federal bank server

citi  - (citi bank server)
chase - ( chase bank server )
wells fargo

client - the one who sends the request
server - the one who responds to the request
API - the one who transfers the request and the response

Client server architecture -

presentation layer - what we see on the screen is presentation layer
Application layer - where the business logic is written
Data layer - where the data comes from (Database)

1 tier architecture - when your presentation layer, application and data layer are available at one place.
standalone applications (desktop based application)

2 tier architecture -
when presentation layer is available at one place and application/data layer is available at another place.
examples - dominoz, pizza hut, subway, walmart etc

3 tier architecture -

when presentation layer is available at one place, application layer is availbale at second place and data layer is available at 3rd place
examples - syntax HRMS

n-tier architecture / distributed architecture -  extended version of 3 tier architecture


to connect all these systems, we need API

to make the communication between the systems developed in different programming languages
to maintain the security of the data

front end - selenium
back end - sql

to identify the glitch in the API, we need to test them

Swagger document - it is the centralized document we have for the api testing and the instructions.


Base URL - 192.198.22.33 - www.amazon.com
End points - /toys , /homedecor, /musicsystem etc


API's which are hosted over the internet are called web services.

All web services are API's but All API's are not web services.


Create
Retrieve
Update
Delete

CRUD operations.

Class 2 -

recap -

client -
server -
API -

request -
response -

client-server architecture -

1 tier architecture
2 tier architecture
3 tier architecture
n tier architecture

CRUD - create, retrieve, update and delete

API's which are hosted over the internet are called web services.

HTTP - hyper text transfer protocol - this is the internet protocol which we used to communicate with the website.

swagger document - this document will give us the information about API's to test.

webservices - we have to test web services

2 types of web services -
REST - representational state transfer
SOAP - simple object access protocol

speed
REST is fast
SOAP is slow

secured
SOAP is more secured
REST is less secured

REST API - we will work with REST API

What is URI - uniform resource identifier

base URL - address of the server  - www.amazon.com
end point - location of the API/entity - the specific information will be found here.

URI = URL+ENDPOINT

C - post
R - get
U - put
D - delete

we always create admin user at first. so that we can perform all CRUD operations after it.

POSTMAN - to perform API testing manually, we use  this tool. SOAP UI, ARC etc are the other tools.

create a request - create an admin

Base URL = hrm.syntaxtechs.net/syntaxapi/api
END point = /createUser.php
only when we need to send/add record in the database, we need body
body/payload = we send the body in JSON format. we pass json format in the form of key and value

{
  "name": "adminbatch17.",
  "email": "tests@batch17.com",
  "password": "Tests@123"
}

Base URI - hrm.syntaxtechs.net/syntaxapi/api/createUser.php
TYPE OF REQUEST = POST

FOR QA - series of 200 and 400 is important
200 series is for successful
400 series is for failure

https://restfulapi.net/http-status-codes/

For All POST request, we need these elements

public API vs private API

For private API's -

4 questions we answer -
Who are you?
Are you allowed?
Show your ID?
What permission you have?


authentication - It confirms your identity to grant permission to access the system.
Example - The signin the facebook is the authentication

authorization - It controls whether you are allowed to use the system and to perform certain operations in it


Statefull application - when the server memory state is set to true, we call it statefull application

for the first time, server checks the info with DB and saved it in server memory so that next time user doesn't need to provide the credentials

here, load balancers are used to distribute the load equally among all the servers


Stateless application - here the state of the server memory is set to false.

in stateless application we work with sessionId/Tokens.

we have to generate the token to show that we are admin user and we are allowed to perform crud operations.

Token - JWT - Json web token

eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.
eyJpYXQiOjE3MDEwMjUxNjAsImlzcyI6ImxvY2FsaG9zdCIsImV4cCI6MTcwMTA2ODM2MCwidXNlcklkIjoiNjA3NyJ9.
-FNq40iWIzaGaujG0aABU2zrWurlFfnm7ls_391NjkU

Header - eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9
{
  "typ": "JWT",
  "alg": "HS256"
}

Payload - eyJpYXQiOjE3MDEwMjUxNjAsImlzcyI6ImxvY2FsaG9zdCIsImV4cCI6MTcwMTA2ODM2MCwidXNlcklkIjoiNjA3NyJ9
{
  "iat": 1701025160,
  "iss": "localhost",
  "exp": 1701068360,
  "userId": "6077"
}


signature - -FNq40iWIzaGaujG0aABU2zrWurlFfnm7ls_391NjkU
HMACSHA256(
  base64UrlEncode(header) + "." +
  base64UrlEncode(payload),

your-256-bit-secret

)

JWT is of 3 types -

Bearer token - bearer token
Grants
MAC token


Admin user created
token generated
idea - Stateless application, we are going to work with

CRUD -

create  an employee -

Base URI = hrm.syntaxtechs.net/syntaxapi/api/createEmployee.php
Type of method = POST
Body/payload =
{
  "emp_firstname": "hind",
  "emp_lastname": "pak",
  "emp_middle_name": "ms",
  "emp_gender": "M",
  "emp_birthday": "2002-11-25",
  "emp_status": "confirmed",
  "emp_job_title": "qa"
}

content-type = application/json


Create an employee -> Get the employee
Update the employee -> Get the employee
Delete the employee -> Get the employee


Class 3 -

recap -

base URI = base url + end point

swagger document gives us this information

CRUD - create, retrieve, update , delete

post, get, delete, put

admin user we created to perform crud operations in the system.

authentication and authorization

stateful and stateless

JWT - json web token - we get session id in the form of token

Bearer token
MAC token
grants

token has 3 elements -
header
payload
signature

first operation we performed was -
creating an employee

post, body (json), url+endpoint, token(authorization) - response 201 -


Create an employee -> Get the employee
Update the employee -> Get the employee
Partially update the employee -> Get the employee
Delete the employee -> Get the employee


When you work with stateful application, instead of bearer token, you should select 'basic auth' in authorization tab
then enter username and password and save it.

update the employee -

put - to update the data completely
patch - to update the information partially

delete the employee -

Cookies -

cookies are the small blocks of data created by a web server while a user is browsing a website and placed on the user's computer or other device by the user's web browsr

cookies are used to track the information of a user.
in house cookies
third party cookies


Class 4 -
recap -

post
get
put
patch
delete

when we work with multiple environments, we need to test API against different env.

In environment, we can pass env variable and in globals we pass all the end points.


In order to execute collection, we need test for every request

chai assertion

javascript syntax method

function method name (){}

postman has all the methods define in it

pm is the postman object for chai assertion library which gives us all the assertions

via this library we can validate anything

validate status code
validate response time
validate message from the body
validate response headers
validate key vs value

pm.test("Validate key and value", function(){
        const responseJson = pm.response.json();
        pm.expect(responseJson.employee.emp_firstname).to.eql("Alina");
});

validating the value in json format

Rest Assured

rest web services, this allows us to send the data in JSON format.
JSON consist of key and value pairs

Rest assured - it is a DSL language (Domain specific language)

we have to add 2 dependency - Rest assured and JSON

rest assured follows BDD approach

given - to prepare the request
when - sending the request/hitting the endpoint
then - validation/assertions


class 5 -

recap -

REST assured library -

DSL - domain specific language
it allows us to send the data in json format
BDD approach -
given - prepare the request
when - send the request / hit the end point
then - validate the response

rest assured
json

RequestSpecification - it allows us to prepare the request.
Response - to hold the complete response of the request

we validate different entities in response

Hamcrest matchers - to verify and validate the data from the body - values, keys, messages etc
This class contains methods to perform assertions.

JsonPath - This is class
jsonPath() - This is the method of JsonPath class.